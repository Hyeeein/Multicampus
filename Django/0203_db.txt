-- 실행
mysql -u root -p

show databases;
use mysql;

show tables;

-- database 생성
create database multi;
use multi;
show tables;

-- table 생성
create table students(
  id int,
  name varchar(100),
  phone char(13),
  address varchar(1000)
);

desc students;

insert into students
values(1, 'hong-gd', '010-1111-1111', 'seoul');

select *
from students;

alter table students
add job varchar(100);

desc students;

insert into students(id, name, address, job)
values(2, 'kim-sd', 'suwon', 'engineer');

select id, name, phone, address, job
from students;

alter table students
modify job varchar(1000);

desc students;

drop table students;
-- desc students;

drop database multi;

show databases;

exit;

cd /
cd test_db-master
cd test_db-master
dir
-- cd 압축해재한 경로
-- mac : ls

mysql -u root -p
source employees.sql

show databases;
use employees;
show tables;

desc employees;

select *
from employees;

select count(*)
from employees;

select emp_no, first_name, last_name
from employees
limit 10;

select *
from employees
limit 1000;

select *
from employees
where hire_date >= '2000-01-01';

select count(*)
from salaries;

select *
from salaries
limit 100;

select *
from salaries
where salary >= 150000;

-- 문제. 월급이 100000 보다 크고 150000보다 작거나 같은
-- 모든 데이터를 출력하자.
select *
from salaries
where salary > 100000
and salary <= 150000;

-- 문제. 1960년대에 태어난 사원의 이름(first_name)과 생일 출력

select * 
from employees
where birth_date >= '1960-01-01' 
and birth_date <= '1960-12-31';

select *
from salaries
order by salary
limit 1000;

select *
from salaries
order by salary asc
limit 100;

select *
from salaries
order by salary desc
limit 100;

-- 늦게 취업한 사람 순서대로, 나이 순으로
select *
from employees
order by hire_date desc, birth_date
limit 100;
-- 나이 순서대로, 늦게 취업한 사람 순서대로
select *
from employees
order by birth_date, hire_date desc
limit 100;

selec title
from titles
limit 1000;

-- group by
select title 
from titles
group by title;

select title, count(*)
from titles
group by title;

-- group by 하지 않은 데이터는 출력 불가!
select title, emp_no
from titles
group by title;

select emp_no, salary
from salaries
group by emp_no;

-- 집계함수에 조건 사용 시, where 대신 having으로 조건 사용!
select count(*)
from employees
where gender = 'M';

-- 부서 별 사원 수
select dept_no, count(dept_no)
from dept_emp
group by dept_no;

-- 부서 별 사원 수가 5만명 이상인 부서만 출력
-- where count(dept_no) > 50000
select dept_no, count(dept_no)
from dept_emp
group by dept_no
having count(dept_no) > 50000;

create database multi;
use multi;

set autocommit = 0;

create table students(
  id int,
  name varchar(100),
  phone char(13),
  address varchar(1000),
  job varchar(100)
);
desc students;

insert into students
values (1, 'hong-gd', '010-1111-1111', 'seoul', 'ai');

insert into students(id, name, phone)
values (2, 'kim-sd', '02-222-2222');

select * from students;

commit;

update students
set phone = '010-2222-2222',
address = 'suwon',
job = 'engineer'
where id = 2;

commit;

select * from students;

delete from students
where id = 1;

rollback;

use mysql;

grant all privileges on *.* to 'root'@'localhost' with grant option;

-- % : 어디서든 접근 가능
create user 'root'@'%' identified by '1234';
grant all privileges on *.* to 'root'@'%' with grant option;

flush privileges;
commit;


use employees;

-- 현재 근무하고 있는 직원들의 전체 신상 명세
-- select * from employees;
-- select * from dept_emp;

select *
from employees emp inner join dept_emp de on emp.emp_no = de.emp_no
limit 100;

select *
from employees emp inner join dept_emp de on emp.emp_no = de.emp_no
where de.to_date = '9999-01-01'
limit 100;

-- 현재 근무하고 있는 직원들의 이름(first_name)과 부서(dept_no) 출력

select first_name, dept_no
from employees inner join dept_emp on employees.emp_no = dept_emp.emp_no
limit 100;

-- 전체 직원들의 이름과 직업 출력
select first_name, title
from employees emp inner join titles tt on emp.emp_no = tt.emp_no
limit 100;

select emp.first_name, tt.title
from employees emp join titles tt on emp.emp_no = tt.emp_no
limit 100;

select *
from employees join titles using(emp_no)
limit 100;

select * 
from employees emp natural join titles tt
limit 100;

select count(*)
from employees join titles using(emp_no);

select count(*)
from employees join titles;

select count(*)
from employees cross join titles;

-- 문제. 현재 근무하고 있는 (9999-01-01) 직원들의 이름과 월급 출력
select first_name, salary
from employees emp inner join salaries sal on emp.emp_no = sal.emp_no
where sal.to_date = '9999-01-01'
limit 100;

select first_name, salary
from employees inner join salaries using(emp_no)
where to_date = '9999-01-01'
limit 100;

select first_name, salary
from employees natural join salaries
where to_date = '9999-01-01'
limit 100;

-- 문제. 부서 이름과 관리자 이름을 출력
select dept_name, first_name
from departments d join dept_manager dm on d.dept_no = dm.dept_no
join employees e on dm.emp_no = e.emp_no
where dm.to_date = '9999-01-01';

select dept_name, first_name
from departments join dept_manager using(dept_no)
join employees using(emp_no)
where to_date = '9999-01-01';

select dept_name, first_name
from departments natural join dept_manager
natural join employees
where to_date = '9999-01-01';

use multi;

create table join_a(
  aa int,
  ab char(3)
);
create table join_b(
  bb int,
  ab char(3)
);

insert into join_a
values(1, 'aaa');

insert into join_a
values(2, 'bbb');

insert into join_a
values(3, 'ccc');

insert into join_b
values(4, 'aaa');

insert into join_b
values(5, 'bbb');

insert into join_b
values(6, 'ccc');

insert into join_a
values (7, 'ddd');

insert into join_b
values (8, 'eee');


select * 
from join_a inner join join_b using(ab);

-- left outer
select * 
from join_a left join join_b using(ab);

-- right outer
select * 
from join_a right join join_b using(ab);

use employees;

-- last_name이 Haraldson 인 사원의 월급 출력
select salary
from salaries
where emp_no in
	(select emp_no
	from employees
	where last_name = 'Haraldson');


exit;










